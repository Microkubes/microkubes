# Default values for microkubes.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

microkubes:
  # Global platform coniguration
  # Database to use: mongodb or aws (dynamodb)
  database: mongodb
  awsDatabaseCredentials: /full/path/to/aws/credentials
  awsDatabaseEndpoint: http://localhost:9000
  awsDatabaseRegion: us-east-1

  serviceAccountName: microkubes

  authKey: dGVzdC1hdXRoLWtleQo=
  encryptKey: t/xzB8eZ5ypUiIGbuOq5PhZAKpU7LS239ucRXDq7Lw8=

  # Microkubes component configuration
  #
  # Authorization Server
  authorizationserver:
    name: authorization-server
    serviceConfigPath: /etc/config/config.json
    security:
      keys:
        default: /run/secrets/default
        system: /run/secrets/system
      signingMethod: RS256
      issuer: oauth2-auth-server

    microservice:
      name: oauth2-auth-server
      port: 8080
      paths: [ "/oauth2", "/auth" ]
      weight: 10
      slots: 10

    database:
      name: oauth2
      user: authserver
      pass: authserver

    session:
      name: "OAuth2Server"

    clientAuthorizationTTL: 300000
    accessTokenTTL: "2592000000"
    accessTokenSigningMethod: RS256
    authCodeLength: 10
    refreshTokenLength: 27

    image:
      repository: microkubes/authorization-server
      tag: v1.0.0-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "authorization-server"

  # Identity Provider
  identityprovider:
    name: identity-provider
    serviceConfigPath: /etc/config/config.json

    microservice:
      port: 8080
      paths: ["/saml"]
      weight: 10
      slots: 100

    systemKey: /run/secrets/system
    serviceKey: /run/secrets/microkubes/service.key
    serviceCert: /run/secrets/microkubes/service.cert

    database:
      name: "identity-provider"
      user: "restapi"
      pass: "restapi"

    image:
      repository: microkubes/identity-provider
      tag: v1.0.3-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "identity-provider"


  # JWT Issuer
  jwtissuer:
    name: jwt-issuer
    serviceConfigPath: /etc/config/config.json

    jwt:
      issuer: Microkubes JWT Authority
      signingMethod: RS512
      expiryTime: "86400000"

    keys:
      default: "/run/secrets/default"
      system: "/run/secrets/system"

    microservice:
        port: 8080
        paths: ["/jwt"]
        weight: 10
        slots: 100

    image:
      repository: microkubes/jwt-issuer
      tag: v1.0.1-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "jwt-issuer"

  # Apps Management
  appsmanagement:
    name: microservice-apps-management
    service:
      port: 8000
      paths: ["/apps"]
      weight: 10
      slots: 100
    serviceConfigPath: /etc/config/config.json
    security:
      keysDir: "/run/secrets"

      jwt:
        description: JWT security middleware

      saml:
        certFile: "/run/secrets/service.cert"
        keyFile: "/run/secrets/service.key"

      oauth2:
        description: OAuth2 security middleware

      acl:
        policy_swagger:
          id: read-swagger
          description: Allows to service swagger.
          resources: ["/swagger<.+>"]
          actions: ["api:read"]
          effect: allow
          subjects: ["<.+>"]

        policy_admin:
          id: apps-allow-admin-access
          description: Allows access to everything to an admin user
          resources: ["<.+>"]
          actions: ["api:read","api:write"]
          effect: allow
          subjects: ["<.+>"]
          conditions:
            roles:
              type: "RolesCondition"
              options:
                values: ["admin", "system"]

        policy_user:
          id: apps-allow-user-access,
          description: Allows user to create and read apps
          resources: ["/apps", "/apps/my", "/apps/<.+>", "/apps/<.+>/regenerate-secret"]
          actions: ["api:read","api:write"]
          effect: allow
          subjects: ["<.+>"]

    database:
      dbInfo:
        database: apps-management
        user: restapi
        pass: restapi

    image:
      repository: microkubes/microservice-apps-management
      tag: v1.0.1-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "microservice-apps-management"


  # Mail
  microservicemail:
    name: microservice-mail
    serviceConfigPath: /etc/config/config.json
    allowUnencryptedConnection: true

    image:
      repository: microkubes/microservice-mail
      tag: v1.0.0-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "microservice-mail"


  # Microservice Registration
  microserviceregistration:
    name: microservice-registration
    serviceConfigPath: /etc/config/config.json

    microservice:
        port: 8080
        paths: ["/users/register"]
        virtual_host: "microservice-registration.service.consul"
        weight: 10
        slots: 100

    systemKey: "/run/secrets/system"

    image:
      repository: microkubes/microservice-registration
      tag: v1.0.1-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "microservice-registration"


  # User
  user:
    name: microservice-user
    serviceConfigPath: /etc/config/config.json

    service:
      port: 8080
      paths: ["/users"]
      weight: 10
      slots: 100

    security:
      keysDir: "/run/secrets/microkubes"
      ignorePatterns: ["/users/verify"]
      jwt:
        name: JWTSecurity
        description: JWT security middleware

      saml:
        certFile: "/run/secrets/microkubes/service.cert"
        keyFile: "/run/secrets/microkubes/service.key"

      oauth2:
        description: OAuth2 security middleware

      acl:
        policy_allow_admin:
          id: users-allow-admin-access
          description: Allows access to everything to an admin user
          resources: ["<.+>"]
          actions: ["api:read", "api:write"]
          effect: allow
          subjects: ["<.+>"]
          conditions:
            roles:
              type: RolesCondition
              options:
                values: ["admin", "system"]

        policy_allow_read:
          id: users-allow-read-access
          description: Allows access to user's own profile
          resources: ["/users/me"]
          actions: ["api:read"]
          effect: allow
          subjects: ["<.+>"]
          conditions:
            roles:
              type: RolesCondition
              options:
                values: ["user"]

        policy_read_swagger:
          id: read-swagger
          description: Allows to service swagger.
          resources: ["/swagger<.+>"]
          actions: ["api:read"]
          effect: allow
          subjects: ["<.+>"]
    database:
      dbInfo:
        database: users
        user: restapi
        pass: restapi

    image:
      repository: microkubes/microservice-user
      tag: v1.0.1-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "microservice-user"


  # User Profile
  userprofile:
    name: microservice-user-profile
    serviceConfigPath: /etc/config/config.json

    service:
      port: 8080
      paths: ["/profiles"]
      weight: 10
      slots: 100
    security:
      keysDir: "/run/secrets"
      jwt:
        description: JWT security middleware
      saml:
        certFile: "/run/secrets/service.cert"
        keyFile: "/run/secrets/service.key"

      oauth2:
        description: OAuth2 security middleware
      acl:
        policy_read_swagger:
          id: read-swagger
          description: Allows to service swagger.
          resources: ["/swagger<.+>"]
          actions: ["api:read"]
          effect: allow
          subjects: ["<.+>"]

        policy_allow_admin:
          id: profile-allow-admin-access
          description: Allows access to everything to an admin user
          resources: ["<.+>"]
          actions: ["api:read","api:write"]
          effect: allow
          subjects: ["<.+>"]
          conditions:
              roles:
                type: RolesCondition
                options:
                  values: ["admin"]

        policy_allow_user:
          id: profile-allow-user-access
          description: Allows user to access its profile
          resources: ["/profiles/me"]
          actions: ["api:read","api:write"]
          effect: allow
          subjects: ["<.+>"]
    database:
      dbInfo:
        name: user-profiles
        user: restapi
        pass: restapi

    image:
      repository: microkubes/microservice-user-profile
      tag: v1.0.1-beta
      pullPolicy: Always

    podAnnotations:
      consul.register/enabled: "true"
      consul.register/service.name: "microservice-user-profile"


# Platform secrets
secrets:
  mongoDB:
    name: mongo-init-db
    type: Opaque
  keys:
    name: microkubes-keys
    type: Opaque

# Microkubes database configuration
# Mongo
mongodb:
  service:
    name: mongo
    type: ClusterIP
    port: 27017
    protocol: TCP

  configmap:
    env:
      mongoRootUsername: admin
      mongoRootPassword: admin
      msUserDB: users
      msUserUser: restapi
      msUserPassword: restapi
      msUserProfileDB: user-profiles
      msUserProfileUser: restapi
      msUserProfilePassword: restapi
      msAppsMngDB: apps-management
      msAppsMngUser: restapi
      msAppsMngPassword: restapi
      msIDPDB: identity-provider
      msIDPUser: restapi
      msIDPPassword: restapi
      msAuthServerDB: oauth2
      msAuthServerUser: authserver
      msAuthServerPassword: authserver

  statefulset:
    name: mongo-cluster
    image:
      repository: mongo:4.0.1
      containerPort: 27017
      hostPort: 27017


# API Gateway configuration
# KONG
kong:
  name: kong
  servicePort: 8000
  serviceType: NodePort
  serviceProtocol: TCP

  adminServiceName: kong-admin
  adminServicePort: '8001'
  adminServiceType: ClusterIP
  adminServiceProtocol: TCP

  replicas: 1

  image:
    repository: microkubes/kong
    tag: v1.0.0-beta
    pullPolicy: Always

  env:
    adminListen: 0.0.0.0:8001
    proxyAccessLog: /dev/stdout
    adminAccessLog: /dev/stdout
    proxyErrorLog: /dev/stderr
    adminErrorLog: /dev/stderr
    dnsServerPort: 8600

  job:
    name: kong-migration

    image:
      repository: microkubes/kong
      tag: v1.0.0-beta
      pullPolicy: Always
      restartPolicy: Never
      command: [ "./migrations.sh" ]

    env:
      nginxDeamon: off

# Fakesmtp configuration
# Mailhog
fakesmtp:
  name: fakesmtp

  replicas: 1

  image:
    repository: mailhog/mailhog

  service:
    name: fakesmtp
    type: NodePort
    smtpPort: 1025
    httpPort: 8025
    smtpProtocol: TCP
    httpProtocol: TCP

# Service Discovery configuration
# CONSUL
consul:
  name: consul

  replicas: 1

  image:
    repository: consul:1.2.2

  dataDir: /consul/data

  type: ClusterIP

  ports:
    ui: '8500'
    alt: 8400
    udp: 53
    https: 8443
    http: 8080
    serflan: 8301
    serfwan: 8302
    consuldns: 8600
    server: 8300


# Kubernetes consul auto registration
# Kube-consul-register
kubeconsulregister:
  name: kube-consul-register

  replicas: 1

  image:
    repository: tczekajlo/kube-consul-register:0.1.6
    pullPolicy: Always

  args:
    logToStdErr: true
    configmap: microkubes/kube-consul-register

  configMap:
    args:
      consulPort: 8500
      consulScheme: http
      consulCAFile: ""
      consulCertFile: ""
      consulKeyFile: ""
      consulInsecureSkipVerify: false
      consulToken: ""
      consulTimeout: 2s
      consulContainerName: consul
      consulNodeSelector: consul=enabled
      podLabelSelector: ""
      k8sTag: microkubes
      registerMode: single
      registerSource: pod

# RabbitMQ
rabbitmq:
  name: rabbitmq

  image:
    repository: rabbitmq:3.7.7-management

  env:
    user: guest
    password: guest

  mountPath: /var/lib/rabbitmq

  replicas: 1

  port: 5672
  username: guest
  password: guest

  service:
    name: rabbitmq
    port: 5672
    protocol: TCP
    uiPort: 15672
    uiProtocol: TCP

# PostgreSQL configuration
postgres:
  name: postgresql

# Mail configuration
mailconfig:
  port: 1025
  user: fake@email.com
  password: password
  email: dev@microkubes.org

# END CONFIGURATION

replicaCount: 1

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
